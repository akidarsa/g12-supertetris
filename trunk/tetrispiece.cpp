/****************************************************************************
 **
 ** Copyright (C) 2004-2008 Trolltech ASA. All rights reserved.
 **
 ** This file is part of the documentation of the Qt Toolkit.
 **
 ** This file may be used under the terms of the GNU General Public
** License versions 2.0 or 3.0 as published by the Free Software
** Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file.  Alternatively you may (at
** your option) use any later version of the GNU General Public
** License if such license has been publicly approved by Trolltech ASA
** (or its successors, if any) and the KDE Free Qt Foundation. In
** addition, as a special exception, Trolltech gives you certain
** additional rights. These rights are described in the Trolltech GPL
** Exception version 1.2, which can be found at
** http://www.trolltech.com/products/qt/gplexception/ and in the file
** GPL_EXCEPTION.txt in this package.
**
** Please review the following information to ensure GNU General
** Public Licensing requirements will be met:
** http://trolltech.com/products/qt/licenses/licensing/opensource/. If
** you are unsure which license is appropriate for your use, please
** review the following information:
** http://trolltech.com/products/qt/licenses/licensing/licensingoverview
** or contact the sales department at sales@trolltech.com.
**
** In addition, as a special exception, Trolltech, as the sole
** copyright holder for Qt Designer, grants users of the Qt/Eclipse
** Integration plug-in the right for the Qt/Eclipse Integration to
** link to functionality provided by Qt Designer and its related
** libraries.
**
** This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
** INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE. Trolltech reserves all rights not expressly
** granted herein.
 **
 ** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 ** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 **
 ****************************************************************************/

 #include <QtCore>

 #include <stdlib.h>
#include <stdio.h>

 #include "tetrispiece.h"

 void TetrisPiece::setRandomShape()
 {
	static char* table4[7] =  {"1111000000000000",
                         "0100110010000000",
                         "1110100000000000",
                         "1100100010000000",
                         "0110110000000000",
                         "1100110000000000",
                         "1110010000000000"};

     static char* table5[18] = {"0100011100010000000000000",
                        "0110001000110000000000000",
                        "0110011000010000000000000",
                        "0010011100100000000000000",
                        "1110010100000000000000000",
                        "1111100000000000000000000",
                        "1111010000000000000000000",
                        "1000011110000000000000000",
                        "1111001000000000000000000",
                        "0100011110000000000000000",
                        "0010011100010000000000000",
                        "1100011000100000000000000",
                        "0010001100110000000000000",
                        "0100011000100001000000000",
                        "1000011100100000000000000",
                        "1110011000000000000000000",
                        "0111011000000000000000000",
                        "1110010000100000000000000"};

     static char* table6[60] = {"001110111000000000000000000000000000",
			"011100111000000000000000000000000000",
			"010000010000110000100000100000000000",
			"001000001000011000110000000000000000",
			"001100011000110000000000000000000000",
			"001000011000110000100000000000000000",
			"000100001100111000000000000000000000",
			"010000110000110000100000000000000000",
			"111000110000100000000000000000000000",
			"001000001000111000010000000000000000",
			"001100111000010000000000000000000000",
			"111000101100000000000000000000000000",
			"111100101000000000000000000000000000",
			"111000101000100000000000000000000000",
			"011100110100000000000000000000000000",
			"111000111000000000000000000000000000",
			"111100010100000000000000000000000000",
			"001000111000100000100000000000000000",
			"000100011100110000000000000000000000",
			"001000111000110000000000000000000000",
			"101000111000100000000000000000000000",
			"000100111100010000000000000000000000",
			"001000011000110000010000000000000000",
			"001000111100001000000000000000000000",
			"010000111000110000000000000000000000",
			"001100001000111000000000000000000000",
			"011000010000110000100000000000000000",
			"011000110000110000000000000000000000",
			"111000010000110000000000000000000000",
			"010000011000010000110000000000000000",
			"001100111000001000000000000000000000",
			"111000110000010000000000000000000000",
			"010000011000110000010000000000000000",
			"011000110000011000000000000000000000",
			"011000110000010000010000000000000000",
			"011100110000010000000000000000000000",
			"111000101000001000000000000000000000",
			"111110100000000000000000000000000000",
			"100000111110000000000000000000000000",
			"111110010000000000000000000000000000",
			"010000111110000000000000000000000000",
			"111110001000000000000000000000000000",
			"111111000000000000000000000000000000",
			"100000111100100000000000000000000000",
			"111100110000000000000000000000000000",
			"011110110000000000000000000000000000",
			"111100100000100000000000000000000000",
			"010000111100100000000000000000000000",
			"111100100100000000000000000000000000",
			"000100111100100000000000000000000000",
			"110000111100000000000000000000000000",
			"110000011110000000000000000000000000",
			"100000100000111100000000000000000000",
			"100000111100000100000000000000000000",
			"111100011000000000000000000000000000",
			"111100010000010000000000000000000000",
			"001000111100010000000000000000000000",
			"010000010000111100000000000000000000",
			"001000111000011000000000000000000000",
			"001000111000010000010000000000000000"};

     static char* table7[195] = {"1000000100000011110000001000000000000000000000000",
			"1100000011110000001000000000000000000000000000000",
			"0010000111000010000001000000100000000000000000000",
			"0001000011100001000001100000000000000000000000000",
			"0010000111000010000001100000000000000000000000000",
			"0001000011100011000000100000000000000000000000000",
			"1010000111000010000001000000000000000000000000000",
			"0001000111100001000000100000000000000000000000000",
			"1111000010100000010000000000000000000000000000000",
			"0001000111100001010000000000000000000000000000000",
			"0010000111100001010000000000000000000000000000000",
			"0100000111100001010000000000000000000000000000000",
			"1000000111100001010000000000000000000000000000000",
			"1111100001010000000000000000000000000000000000000",
			"0100000111000011100000000000000000000000000000000",
			"0111000110100000010000000000000000000000000000000",
			"0001000011100011010000000000000000000000000000000",
			"0100000011100011010000000000000000000000000000000",
			"1111000110100000000000000000000000000000000000000",
			"1110000101000010100000000000000000000000000000000",
			"0010000111000010100001000000000000000000000000000",
			"1110000101000010000001000000000000000000000000000",
			"0111000010100011000000000000000000000000000000000",
			"0111000110100001000000000000000000000000000000000",
			"1000000111000010100001000000000000000000000000000",
			"1111000010100001000000000000000000000000000000000",
			"0001000111100010100000000000000000000000000000000",
			"1111000101000000100000000000000000000000000000000",
			"0010000111100010100000000000000000000000000000000",
			"0100000111100010100000000000000000000000000000000",
			"1111000101000010000000000000000000000000000000000",
			"0111100110100000000000000000000000000000000000000",
			"1000000111100010100000000000000000000000000000000",
			"1111100010100000000000000000000000000000000000000",
			"0010000111000010110000000000000000000000000000000",
			"1111000101100000000000000000000000000000000000000",
			"0100000111000010110000000000000000000000000000000",
			"1110000101100010000000000000000000000000000000000",
			"0111000110110000000000000000000000000000000000000",
			"1000000111000010110000000000000000000000000000000",
			"1111000010110000000000000000000000000000000000000",
			"0011000111100001000000000000000000000000000000000",
			"0011000111000001100000000000000000000000000000000",
			"1011000111000001000000000000000000000000000000000",
			"0001100111100000100000000000000000000000000000000",
			"0010000001000011110000100000000000000000000000000",
			"0010000001100011100000100000000000000000000000000",
			"0010000001000000100001110000010000000000000000000",
			"0110000001000011100000100000000000000000000000000",
			"0011000001000011100000100000000000000000000000000",
			"0010000001100001100001100000000000000000000000000",
			"0010000001000000100000110000110000000000000000000",
			"0110000001000001100001100000000000000000000000000",
			"0011000001000001100001100000000000000000000000000",
			"0010000001000001100001110000000000000000000000000",
			"0010000011000001100001100000000000000000000000000",
			"0010000001000011100001100000000000000000000000000",
			"0010000001000001100001100000100000000000000000000",
			"0001000000100000110001110000000000000000000000000",
			"0100000010000011000001000000100000010000000000000",
			"0010000001000001100000100000110000000000000000000",
			"0100000010000011000001000000110000000000000000000",
			"0001110111100000000000000000000000000000000000000",
			"0011100111000010000000000000000000000000000000000",
			"1011100111000000000000000000000000000000000000000",
			"0011100111000001000000000000000000000000000000000",
			"0111100111000000000000000000000000000000000000000",
			"0010000001110011100000000000000000000000000000000",
			"0111000111000010000000000000000000000000000000000",
			"1111000111000000000000000000000000000000000000000",
			"0100000011100011100000000000000000000000000000000",
			"0111000111000001000000000000000000000000000000000",
			"0010000001000011100000100000010000000000000000000",
			"0100000110000011000001000000100000000000000000000",
			"0010000001000001100001100000010000000000000000000",
			"0010000001000001110001100000000000000000000000000",
			"0001100001100011100000000000000000000000000000000",
			"0011000011000011000001000000000000000000000000000",
			"0011000111000011000000000000000000000000000000000",
			"0111000011000011000000000000000000000000000000000",
			"0001000001100011100000100000000000000000000000000",
			"0010000111000011000001000000000000000000000000000",
			"0010000011000011000001100000000000000000000000000",
			"0000100000110011110000000000000000000000000000000",
			"0001000001100011100001000000000000000000000000000",
			"0001000101100011100000000000000000000000000000000",
			"0011000001100011100000000000000000000000000000000",
			"0001000001100011110000000000000000000000000000000",
			"0001000001100011100000010000000000000000000000000",
			"0010000111000001100000100000000000000000000000000",
			"1100000110000011000001000000000000000000000000000",
			"0010000011000011100000100000000000000000000000000",
			"1111000011000001000000000000000000000000000000000",
			"1000000111000011000001000000000000000000000000000",
			"1110000110000011000000000000000000000000000000000",
			"1110000111000010000000000000000000000000000000000",
			"0001000000100011110000010000000000000000000000000",
			"0010000101000011100000100000000000000000000000000",
			"0010000001000011100000110000000000000000000000000",
			"0011000111000010000001000000000000000000000000000",
			"0010000001000011100001000000100000000000000000000",
			"0010000111100010000001000000000000000000000000000",
			"0001000111100011000000000000000000000000000000000",
			"0101000011100011000000000000000000000000000000000",
			"0001100011100011000000000000000000000000000000000",
			"0001000011110011000000000000000000000000000000000",
			"0001000111100001100000000000000000000000000000000",
			"1010000111000011000000000000000000000000000000000",
			"0110000111000011000000000000000000000000000000000",
			"0010000111000011000000100000000000000000000000000",
			"1000000101000011100001000000000000000000000000000",
			"1010000111000010100000000000000000000000000000000",
			"0000100111110000100000000000000000000000000000000",
			"1001000111100001000000000000000000000000000000000",
			"0001000111110001000000000000000000000000000000000",
			"0110000011000011000000100000000000000000000000000",
			"0010000011000011000000100000010000000000000000000",
			"0001000111110000010000000000000000000000000000000",
			"0010000111100001100000000000000000000000000000000",
			"0110000111100000100000000000000000000000000000000",
			"0011000111100000100000000000000000000000000000000",
			"0010000001000011110000010000000000000000000000000",
			"0010000111100000110000000000000000000000000000000",
			"0010000111110000100000000000000000000000000000000",
			"0001100000100011110000000000000000000000000000000",
			"0111000001000011100000000000000000000000000000000",
			"0010000001100000100001110000000000000000000000000",
			"0011000001000011110000000000000000000000000000000",
			"0011000001000011100000010000000000000000000000000",
			"0011100001000011100000000000000000000000000000000",
			"0001000001100000100001110000000000000000000000000",
			"0110000010000011000001100000000000000000000000000",
			"0100000011000001000001100000100000000000000000000",
			"0110000010000011100001000000000000000000000000000",
			"0010000011000001000001100000100000000000000000000",
			"0110000110000011100000000000000000000000000000000",
			"0110000110000011000000100000000000000000000000000",
			"1100000011000001000001100000000000000000000000000",
			"0100000010000001100000100000110000000000000000000",
			"0100000011000001000001100000010000000000000000000",
			"0001100111100000010000000000000000000000000000000",
			"0010000001100011100000010000000000000000000000000",
			"0011000111000000110000000000000000000000000000000",
			"0011000111000000100000010000000000000000000000000",
			"1110000110000001000000100000000000000000000000000",
			"1111000110000001000000000000000000000000000000000",
			"0100000010000001100001100000010000000000000000000",
			"0111000110000001100000000000000000000000000000000",
			"0111000110000001000000100000000000000000000000000",
			"0111100110000001000000000000000000000000000000000",
			"1110000101000000100000010000000000000000000000000",
			"1000000111110010000000000000000000000000000000000",
			"1111100100000010000000000000000000000000000000000",
			"1111100110000000000000000000000000000000000000000",
			"0100000111110010000000000000000000000000000000000",
			"1111100101000000000000000000000000000000000000000",
			"1111100100100000000000000000000000000000000000000",
			"0001000111110010000000000000000000000000000000000",
			"1111110100000000000000000000000000000000000000000",
			"1111100100010000000000000000000000000000000000000",
			"0000100111110010000000000000000000000000000000000",
			"1000000100000011111000000000000000000000000000000",
			"1000000111110001000000000000000000000000000000000",
			"1100000111110000000000000000000000000000000000000",
			"1000000111110000010000000000000000000000000000000",
			"1001000111110000000000000000000000000000000000000",
			"1000000111111000000000000000000000000000000000000",
			"1000000111110000001000000000000000000000000000000",
			"1111100011000000000000000000000000000000000000000",
			"1111100010000001000000000000000000000000000000000",
			"0010000111110001000000000000000000000000000000000",
			"1111110010000000000000000000000000000000000000000",
			"0110000111110000000000000000000000000000000000000",
			"0100000010000011111000000000000000000000000000000",
			"0100000111111000000000000000000000000000000000000",
			"1111100001000000100000000000000000000000000000000",
			"1111110001000000000000000000000000000000000000000",
			"0010000111111000000000000000000000000000000000000",
			"1111111000000000000000000000000000000000000000000",
			"1100000111100010000000000000000000000000000000000",
			"1100000011110001000000000000000000000000000000000",
			"1000000100000011110001000000000000000000000000000",
			"1000000111100010000001000000000000000000000000000",
			"1000000111100010010000000000000000000000000000000",
			"1001000111100010000000000000000000000000000000000",
			"0111110110000000000000000000000000000000000000000",
			"0111100110010000000000000000000000000000000000000",
			"0000100011110011000000000000000000000000000000000",
			"1111000100000010000001000000000000000000000000000",
			"1111000100100010000000000000000000000000000000000",
			"0001000111100010000001000000000000000000000000000",
			"0100000010000011110001000000000000000000000000000",
			"1111000100110000000000000000000000000000000000000",
			"1111000100100000010000000000000000000000000000000",
			"1100000011111000000000000000000000000000000000000"};


     blocks = qrand() % 4 + 4;
     if (size() == 4)
     {
         setShape(table4[(qrand() % 7)],4);
     }
     else if (size() == 5)
     {
         setShape(table5[(qrand() % 18)],5);
     }
     else if (size() == 6)
     {
         setShape(table6[(qrand() % 60)],6);
     }
     else if (size() == 7)
     {
         setShape(table7[(qrand() % 195)],7);
     }
 }

 void TetrisPiece::setShape(TetrisShape shape)
 {
     static const int coordsTable[8][4][2] = {
         { { 0, 0 },   { 0, 0 },   { 0, 0 },   { 0, 0 } },
         { { 0, -1 },  { 0, 0 },   { -1, 0 },  { -1, 1 } },
         { { 0, -1 },  { 0, 0 },   { 1, 0 },   { 1, 1 } },
         { { 0, -1 },  { 0, 0 },   { 0, 1 },   { 0, 2 } },
         { { -1, 0 },  { 0, 0 },   { 1, 0 },   { 0, 1 } },
         { { 0, 0 },   { 1, 0 },   { 0, 1 },   { 1, 1 } },
         { { -1, -1 }, { 0, -1 },  { 0, 0 },   { 0, 1 } },
         { { 1, -1 },  { 0, -1 },  { 0, 0 },   { 0, 1 } }
     };

     for (int i = 0; i < 4 ; i++) {
         for (int j = 0; j < 2; ++j)
             coords[i][j] = coordsTable[shape][i][j];
     }
     blocks = 4;
     pieceShape = shape;
 }

 void TetrisPiece::setShape(int shape[],int blockCount){
     int j=0, k=0;
     blocks = blockCount;
     for(int i = 0; i< blockCount*blockCount; i++){
         if((i%blockCount == 0)&&(i != 0)){ j++; }
         if(shape[i]==1){
             switch(blockCount){
                 case 4:
                     coords[k][0] = ((i%4)-1);
                     coords[k][1] = (j-1);
                     break;
                 case 5:
                     coords5[k][0] = ((i%5)-2);
                     coords5[k][1] = (j-1);
                     break;
                 case 6:
                     coords6[k][0] = ((i%6)-2);
                     coords6[k][1] = (j-1);
                     break;
                 case 7:
                     coords7[k][0] = ((i%7)-3);
                     coords7[k][1] = (j-1);
                     break;
             }
             k++;
         }
     }
     pieceShape = TetrisShape(2);
 }

 void TetrisPiece::setShape(char* shape,int blockCount){
     int j=0, k=0;
     for(int i = 0; i< blockCount*blockCount; i++){
         if((i%blockCount == 0)&&(i != 0)){ j++; }
         if(shape[i]=='1'){
             switch(blockCount){
                 case 4:
                     coords[k][0] = ((i%4)-1);
                     coords[k][1] = (j-1);
                     break;
                 case 5:
                     coords5[k][0] = ((i%5)-2);
                     coords5[k][1] = (j-1);
                     break;
                 case 6:
                     coords6[k][0] = ((i%6)-2);
                     coords6[k][1] = (j-1);
                     break;
                 case 7:
                     coords7[k][0] = ((i%7)-3);
                     coords7[k][1] = (j-1);
                     break;
             }
             k++;
         }
     }
     pieceShape = TetrisShape(2);
 }

 int TetrisPiece::minX() const
 {
     int min;
     switch(blocks){
         case 4:
            min = coords[0][0];
            break;
         case 5:
            min = coords5[0][0];
            break;
         case 6:
            min = coords6[0][0];
            break;
         case 7:
            min = coords7[0][0];
            break;
     }
    for (int i = 1; i < blocks; ++i)
    {
	switch(blocks){
         case 4:
            min = qMin(min, coords[i][0]);
            break;
         case 5:
            min = qMin(min, coords5[i][0]);
            break;
         case 6:
            min = qMin(min, coords6[i][0]);
            break;
         case 7:
            min = qMin(min, coords7[i][0]);
            break;
	}
    }
    return min;
 }

 int TetrisPiece::maxX() const
 {
     int max;
     switch(blocks){
         case 4:
            max = coords[0][0];
            break;
         case 5:
            max = coords5[0][0];
            break;
         case 6:
            max = coords6[0][0];
            break;
         case 7:
            max = coords7[0][0];
            break;
     }
     for (int i = 1; i < blocks; ++i)
     {
        switch(blocks){
         case 4:
            max = qMax(max, coords[i][0]);
            break;
         case 5:
            max = qMax(max, coords5[i][0]);
            break;
         case 6:
            max = qMax(max, coords6[i][0]);
            break;
         case 7:
            max = qMax(max, coords7[i][0]);
            break;
	}
     }
     return max;
 }

 int TetrisPiece::minY() const
 {
     int min;
     switch(blocks){
         case 4:
            min = coords[0][1];
            break;
         case 5:
            min = coords5[0][1];
            break;
         case 6:
            min = coords6[0][1];
            break;
         case 7:
            min = coords7[0][1];
            break;
     }
     for (int i = 1; i < blocks; ++i)
    {
	switch(blocks){
         case 4:
            min = qMin(min, coords[i][1]);
            break;
         case 5:
            min = qMin(min, coords5[i][1]);
            break;
         case 6:
            min = qMin(min, coords6[i][1]);
            break;
         case 7:
            min = qMin(min, coords7[i][1]);
            break;
	}
    }
     return min;
 }

 int TetrisPiece::maxY() const
 {
     int max;
     switch(blocks){
         case 4:
            max = coords[0][1];
            break;
         case 5:
            max = coords5[0][1];
            break;
         case 6:
            max = coords6[0][1];
            break;
         case 7:
            max = coords7[0][1];
            break;
     }
     for (int i = 1; i < blocks; ++i)
     {
        switch(blocks){
         case 4:
            max = qMax(max, coords[i][1]);
            break;
         case 5:
            max = qMax(max, coords5[i][1]);
            break;
         case 6:
            max = qMax(max, coords6[i][1]);
            break;
         case 7:
            max = qMax(max, coords7[i][1]);
            break;
	}
     }
     return max;
 }

 TetrisPiece TetrisPiece::rotatedLeft() const
 {
     TetrisPiece result;
     result.pieceShape = pieceShape;
     result.blocks = blocks;
     for (int i = 0; i < blocks; ++i) {
         result.setX(i, y(i) );
         result.setY(i, -x(i) );
     }
     return result;
 }

 TetrisPiece TetrisPiece::rotatedRight() const
 {
     TetrisPiece result;
     result.pieceShape = pieceShape;
     result.blocks = blocks;
     for (int i = 0; i < blocks; ++i) {
         result.setX(i, -y(i) );
         result.setY(i, x(i) );
     }
     return result;
 }
